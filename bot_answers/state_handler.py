from aiogram import Router, F
from bot_start import bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot_keyboards.simple_keyboards import start_kb
from bot_data_base.bot_db import add_user, stop_search, finding, ret_find, playing_game
from bot_states.states import Form
from bot_keyboards.builder import build_kb

router = Router()

@router.message(F.text.lower() == "–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def rules(message: Message, state: FSMContext):
    await add_user(message.from_user.id, 1)
    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫...", reply_markup=build_kb('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫'))
    await state.set_state(Form.one)
    await finding(message.from_user.id)


@router.message(Form.one, F.text.lower() == "üóø")
async def stop_finding(message: Message, state: FSMContext):
    f = await ret_find(message.from_user.id)
    if (f == 3):
        await playing_game(message.from_user.id, "–∫–∞–º–µ–Ω—å")


@router.message(Form.one, F.text.lower() == "‚úÇ")
async def stop_finding(message: Message, state: FSMContext):
    f = await ret_find(message.from_user.id)
    if (f == 3):
        await playing_game(message.from_user.id, "–Ω–æ–∂–Ω–∏—Ü—ã")


@router.message(Form.one, F.text.lower() == "üìÉ")
async def stop_finding(message: Message, state: FSMContext):
    f = await ret_find(message.from_user.id)
    if (f == 3):
        await playing_game(message.from_user.id, "–±—É–º–∞–≥–∞")


@router.message(Form.one, F.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å")
async def stop_finding(message: Message, state: FSMContext):
    f = await ret_find(message.from_user.id)
    if (f == 4):
        await message.answer("Ok!", reply_markup=start_kb)
        await state.clear()




@router.message(Form.one, F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
async def one(message: Message, state: FSMContext):
    f = await ret_find(message.from_user.id)
    if (f == 1):
        await stop_search(message.from_user.id)
        await message.answer("–ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=start_kb)
        await state.clear()


@router.message(Form.one)
async def one(message: Message, state: FSMContext):
    await message.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=build_kb('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫'))